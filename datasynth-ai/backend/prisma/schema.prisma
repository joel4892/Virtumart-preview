generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ANNOTATOR
  VIEWER
}

enum DatasetType {
  TEXT
  IMAGE
}

enum AnnotationType {
  ENTITY
  CLASSIFICATION
  SENTIMENT
  BBOX
  POLYGON
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  projects  Project[]
  workflows Workflow[]
  apiKeys   ApiKey[]
  usage     UsageEvent[]
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  passwordHash   String
  role           Role
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  datasets       Dataset[]
  annotations    Annotation[]
  auditLogs      AuditLog[]
  usage          UsageEvent[]
}

model Project {
  id             String   @id @default(cuid())
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  datasets       Dataset[]
  usage          UsageEvent[]
}

model Dataset {
  id             String   @id @default(cuid())
  name           String
  type           DatasetType
  fileKey        String
  storageProvider String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  owner          User     @relation(fields: [ownerId], references: [id])
  ownerId        String
  project        Project  @relation(fields: [projectId], references: [id])
  projectId      String
  annotations    Annotation[]
  reports        ComplianceReport[]
  status         String   @default("ingestion")
}

model Annotation {
  id          String   @id @default(cuid())
  type        AnnotationType
  label       String
  payload     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dataset     Dataset  @relation(fields: [datasetId], references: [id])
  datasetId   String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

model ComplianceReport {
  id          String   @id @default(cuid())
  summary     String
  findings    Json
  createdAt   DateTime @default(now())
  dataset     Dataset  @relation(fields: [datasetId], references: [id])
  datasetId   String
  certificatePath String?
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  entity    String
  entityId  String
  before    Json?
  after     Json?
}

model Workflow {
  id             String   @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  name           String
  config         Json
  createdAt      DateTime @default(now())
}

model ApiKey {
  id             String   @id @default(cuid())
  key            String   @unique
  label          String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime @default(now())
  revoked        Boolean  @default(false)
}

model UsageEvent {
  id             String   @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  project        Project? @relation(fields: [projectId], references: [id])
  projectId      String?
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?
  type           String
  metadata       Json?
  createdAt      DateTime @default(now())
}